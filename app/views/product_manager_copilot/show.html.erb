<div class="min-h-screen bg-gradient-to-r from-cyan-500 to-blue-500 py-6 px-4 sm:px-6 lg:px-8">
  <div class="max-w-7xl mx-auto space-y-6">
    <!-- Copilot Card -->
    <div class="w-full">
      <div class="bg-gradient-to-br from-yellow-100 to-orange-100 shadow-lg rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:px-6 bg-gradient-to-r from-yellow-400 to-orange-500 flex items-center">
          <div class="bg-white rounded-full p-1 mr-3">
            <svg class="w-6 h-6 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>
          </div>
          <h2 class="text-xl font-bold text-white">AI Product Manager Copilot</h2>
        </div>
        <div class="p-6 max-h-[30vh] overflow-y-auto">
          <div id="conversation" class="styled-scrollbar">
            <% if @messages.empty? %>
              <div class="text-center">
                <h3 class="text-xl font-semibold mb-2 text-orange-800">Ask AI Copilot anything</h3>
                <p class="text-orange-700 mb-4">The AI Copilot can help you improve your PRD. Choose from the prompts below or write your own.</p>
              </div>
            <% else %>
              <% @messages.each do |message| %>
                <div class="<%= message.role == 'user' ? 'text-right' : 'text-left' %> mb-2">
                  <span class="inline-block <%= message.role == 'user' ? 'bg-orange-200' : 'bg-yellow-200' %> rounded-lg px-4 py-2 shadow">
                    <%= message.content %>
                  </span>
                </div>
              <% end %>
            <% end %>
          </div>

          <%= form_with(url: product_idea_prd_product_manager_copilot_path(@product_idea, @prd, @conversation), method: :patch, local: false, class: "mt-4") do |f| %>
            <div class="relative">
              <%= f.text_area :message, rows: 2, class: "w-full rounded-md border-orange-300 shadow-sm focus:border-orange-500 focus:ring focus:ring-orange-200 focus:ring-opacity-50 pr-12", placeholder: "Ask AI Copilot anything..." %>
              <button type="submit" class="absolute bottom-2 right-2 text-orange-500 hover:text-orange-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7"></path></svg>
              </button>
            </div>
          <% end %>

          <div class="flex flex-wrap justify-center gap-2 mt-4">
            <button type="button" class="prompt-chip bg-white text-orange-700 px-4 py-2 rounded-full text-sm font-medium shadow-sm hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 border border-orange-300">Improve PRD structure</button>
            <button type="button" class="prompt-chip bg-white text-orange-700 px-4 py-2 rounded-full text-sm font-medium shadow-sm hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 border border-orange-300">Clarify requirements</button>
            <button type="button" class="prompt-chip bg-white text-orange-700 px-4 py-2 rounded-full text-sm font-medium shadow-sm hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 border border-orange-300">Suggest features</button>
            <button type="button" class="prompt-chip bg-white text-orange-700 px-4 py-2 rounded-full text-sm font-medium shadow-sm hover:bg-orange-50 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 border border-orange-300">Review PRD</button>
          </div>
        </div>
      </div>
    </div>

    <!-- PRD Card -->
    <div class="w-full">
      <div class="bg-white shadow-lg rounded-lg overflow-hidden">
        <div class="px-4 py-5 sm:px-6 bg-gradient-to-r from-cyan-600 to-blue-600">
          <h2 class="text-xl font-bold text-white">PRD: <%= @prd.title %></h2>
        </div>
        <div class="p-6 h-[calc(100vh-300px)] overflow-y-auto">
          <%= form_with(model: [@product_idea, @prd], local: true) do |form| %>
            <div id="prd-content" class="prose max-w-none space-y-6">
              <%= form.text_area :content, rows: 20, class: "w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring focus:ring-blue-200 focus:ring-opacity-50" %>
            </div>
            <div class="mt-4">
              <%= form.submit "Update PRD", class: "px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" %>
            </div>
          <% end %>
        </div>
      </div>
      <!-- Loading Indicator -->
<div id="loading-indicator" class="hidden fixed top-0 left-0 w-full h-full bg-gray-900 bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white p-5 rounded-lg flex items-center">
    <svg class="animate-spin h-5 w-5 mr-3 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
    <span class="text-gray-700">AI is thinking...</span>
  </div>
</div>
    </div>
  </div>
</div>

<script>
  function showLoading() {
    document.getElementById('loading-indicator').classList.remove('hidden');
  }

  function hideLoading() {
    document.getElementById('loading-indicator').classList.add('hidden');
  }

  function sendPrompt(prompt) {
    console.log("Sending prompt:", prompt);
    const forms = document.querySelectorAll('form');
    console.log("Forms found:", forms.length);
    
    let form, input;
    
    forms.forEach((f, index) => {
      console.log(`Form ${index} action:`, f.action);
      const i = f.querySelector('textarea[name="message"]');
      if (i) {
        form = f;
        input = i;
        console.log("Found form with textarea");
      }
    });

    if (!form || !input) {
      console.error("Form or textarea not found");
      return;
    }
    
    input.value = prompt;
    submitForm(form);
  }

  function submitForm(form) {
    console.log("Submitting form");
    showLoading();
    const url = form.action;
    const formData = new FormData(form);

    fetch(url, {
      method: 'PATCH',
      body: formData,
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Accept': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log("Received response:", data);
      updateConversation(formData.get('message'), data.response);
      form.reset();
      hideLoading();
    })
    .catch(error => {
      console.error('Error:', error);
      hideLoading();
    });
  }

  function updateConversation(userMessage, aiResponse) {
    console.log("Updating conversation");
    const conversation = document.getElementById('conversation');
    conversation.innerHTML += `
      <div class="text-right mb-2">
        <span class="inline-block bg-orange-200 rounded-lg px-4 py-2 shadow">
          ${userMessage}
        </span>
      </div>
      <div class="text-left mb-2">
        <span class="inline-block bg-yellow-200 rounded-lg px-4 py-2 shadow">
          ${aiResponse}
        </span>
      </div>
    `;
    scrollToBottom();
  }

  function scrollToBottom() {
    var conversation = document.getElementById('conversation');
    conversation.scrollTop = conversation.scrollHeight;
  }

  function setupEventListeners() {
    console.log("Setting up event listeners");
    const forms = document.querySelectorAll('form');
    console.log("Forms found:", forms.length);
    
    forms.forEach((form, index) => {
      console.log(`Setting up listener for form ${index}`);
      form.addEventListener('submit', function(e) {
        console.log("Form submitted");
        e.preventDefault();
        submitForm(this);
      });
    });

    document.querySelectorAll('.prompt-chip').forEach(chip => {
      chip.addEventListener('click', function() {
        console.log("Prompt chip clicked:", this.textContent);
        sendPrompt(this.textContent);
      });
    });
  }

  // Run setup when the DOM is fully loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupEventListeners);
  } else {
    setupEventListeners();
  }
</script>